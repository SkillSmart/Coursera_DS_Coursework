# aggregate humanitarian damage per damageSource
sumHumanDamage <-aggregate(formula=cbind(injuries, fatalities) ~ damageSource, data=reducedStormData, FUN=sum, na.rm=TRUE)
sumHumanDamage <- sumHumanDamage[order(sumHumanDamage$injuries, decreasing=TRUE),]
rownames(sumHumanDamage) <- NULL
sumHumanDamage$damageSource <- factor(sumHumanDamage$damageSource, levels=rev(sumHumanDamage$damageSource))
# define max values for bar chart scale
maxInjuries <- max(sumHumanDamage$injuries)
maxInjuries <- maxInjuries + round(maxInjuries * 0.25)
maxFatalities <- max(sumHumanDamage$fatalities)
maxFatalities <- maxFatalities + round(maxFatalities * 0.25)
}
if(dataProcess){
save(reducedStormData,
sumHumanDamage,
meltSumEconomicDamage,
sumEconomicDamage,
maxInjuries,
maxFatalities,
cutOffYear,
endYear,
file="./data/StormData.RData")
}
head(reducedStormData, n=5L)
tail(reducedStormData, n=5L)
# add middle column with just damageSource labels
g.mid <- ggplot(data=sumHumanDamage, aes(x=1,y=damageSource)) +
geom_text(aes(label=damageSource), size=4) +
ggtitle("") +
ylab(NULL) +
scale_x_continuous(expand=c(0,0),limits=c(0.94,1.065)) +
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
# add left chart with injuries
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
# add right chart with fatalities
g.fatalities <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=fatalities)) +
geom_bar(stat = "identity") +
geom_text(aes(label=fatalities), size=3, vjust=0.5, hjust=-1.0) +
ggtitle("Fatalities") +
scale_y_continuous(expand=c(0, 0), limits=c(0,maxFatalities)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,0,1,-1), "mm"))
# combine charts in one plot
gg.injuries <- ggplot_gtable(ggplot_build(g.injuries))
gg.fatalities <- ggplot_gtable(ggplot_build(g.fatalities))
gg.mid <- ggplot_gtable(ggplot_build(g.mid))
grid.arrange(gg.injuries,gg.mid,gg.fatalities,
ncol=3,widths=c(4/10,2/10,4/10),
main=paste("Aggregated human injuries & fatalities for weather events from ",cutOffYear," to ",endYear, sep=""))
sumHumanDamage
ggplot(meltSumEconomicDamage, aes(x=damageSource, y=damage/1000000)) +
geom_bar(stat = "identity", aes(fill=damageType)) +
xlab("Event Type") +
theme(axis.text.x = element_text(angle = 45, size=8, hjust = 1, vjust = 1)) +
ylab("Total Damage (millions of USD)") +
ggtitle(paste("Aggregated property and crop damage for weather events from ",cutOffYear," to ",endYear, sep=""))
sumEconomicDamage
g.mid <- ggplot(data=sumHumanDamage, aes(x=1,y=damageSource)) +
geom_text(aes(label=damageSource), size=4) +
ggtitle("") +
ylab(NULL) +
scale_x_continuous(expand=c(0,0),limits=c(0.94,1.065)) +
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
# add left chart with injuries
g.mid
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
g.mid + g.injuries
g.fatalities <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=fatalities)) +
geom_bar(stat = "identity") +
geom_text(aes(label=fatalities), size=3, vjust=0.5, hjust=-1.0) +
ggtitle("Fatalities") +
scale_y_continuous(expand=c(0, 0), limits=c(0,maxFatalities)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,0,1,-1), "mm"))
gg.injuries <- ggplot_gtable(ggplot_build(g.injuries))
g.injuries
g.mid <- ggplot(data=sumHumanDamage, aes(x=1,y=damageSource)) +
geom_text(aes(label=damageSource), size=4) +
ggtitle("") +
ylab(NULL) +
scale_x_continuous(expand=c(0,0),limits=c(0.94,1.065)) +
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
g.mid
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
g.injuries
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
g.injuries
injuries
g.mid <- ggplot(data=sumHumanDamage, aes(x=1,y=damageSource)) +
geom_text(aes(label=damageSource), size=4) +
ggtitle("") +
ylab(NULL) +
scale_x_continuous(expand=c(0,0)) +
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
g.injuries
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
g.injuries
suppressWarnings(print(ggplot(...)))
# add middle column with just damageSource labels
g.mid <- ggplot(data=sumHumanDamage, aes(x=1,y=damageSource)) +
geom_text(aes(label=damageSource), size=4) +
ggtitle("") +
ylab(NULL) +
scale_x_continuous(expand=c(0,0),limits=c(0.94,1.065)) +
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
# add left chart with injuries
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
# add right chart with fatalities
g.fatalities <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=fatalities)) +
geom_bar(stat = "identity") +
geom_text(aes(label=fatalities), size=3, vjust=0.5, hjust=-1.0) +
ggtitle("Fatalities") +
scale_y_continuous(expand=c(0, 0), limits=c(0,maxFatalities)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,0,1,-1), "mm"))
# combine charts in one plot
gg.injuries <- ggplot_gtable(ggplot_build(g.injuries))
gg.fatalities <- ggplot_gtable(ggplot_build(g.fatalities))
gg.mid <- ggplot_gtable(ggplot_build(g.mid))
grid.arrange(gg.injuries,gg.mid,gg.fatalities,
ncol=3,widths=c(4/10,2/10,4/10),
main=paste("Aggregated human injuries & fatalities for weather events from ",cutOffYear," to ",endYear, sep=""))
# add middle column with just damageSource labels
g.mid <- ggplot(data=sumHumanDamage, aes(x=1,y=damageSource)) +
geom_text(aes(label=damageSource), size=4) +
ggtitle("") +
ylab(NULL) +
scale_x_continuous(expand=c(0,0),limits=c(0.94,1.065)) +
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
# add left chart with injuries
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
# add right chart with fatalities
g.fatalities <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=fatalities)) +
geom_bar(stat = "identity") +
geom_text(aes(label=fatalities), size=3, vjust=0.5, hjust=-1.0) +
ggtitle("Fatalities") +
scale_y_continuous(expand=c(0, 0), limits=c(0,maxFatalities)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,0,1,-1), "mm"))
# combine charts in one plot
gg.injuries <- ggplot_gtable(ggplot_build(g.injuries))
gg.fatalities <- ggplot_gtable(ggplot_build(g.fatalities))
gg.mid <- ggplot_gtable(ggplot_build(g.mid))
grid.arrange(gg.injuries,gg.mid,gg.fatalities,
ncol=3,widths=c(4/10,2/10,4/10),
main=paste("Aggregated human injuries & fatalities for weather events from ",cutOffYear," to ",endYear, sep=""))
# add middle column with just damageSource labels
g.mid <- ggplot(data=sumHumanDamage, aes(x=1,y=damageSource)) +
geom_text(aes(label=damageSource), size=4) +
ggtitle("") +
ylab(NULL) +
scale_x_continuous(expand=c(0,0),limits=c(0.94,1.065)) +
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
# add left chart with injuries
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries, y)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
# add right chart with fatalities
g.fatalities <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=fatalities)) +
geom_bar(stat = "identity") +
geom_text(aes(label=fatalities), size=3, vjust=0.5, hjust=-1.0) +
ggtitle("Fatalities") +
scale_y_continuous(expand=c(0, 0), limits=c(0,maxFatalities)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,0,1,-1), "mm"))
# combine charts in one plot
gg.injuries <- ggplot_gtable(ggplot_build(g.injuries))
gg.fatalities <- ggplot_gtable(ggplot_build(g.fatalities))
gg.mid <- ggplot_gtable(ggplot_build(g.mid))
grid.arrange(gg.injuries,gg.mid,gg.fatalities,
ncol=3,widths=c(4/10,2/10,4/10),
main=paste("Aggregated human injuries & fatalities for weather events from ",cutOffYear," to ",endYear, sep=""))
# add middle column with just damageSource labels
g.mid <- ggplot(data=sumHumanDamage, aes(x=1,y=damageSource)) +
geom_text(aes(label=damageSource), size=4) +
ggtitle("") +
ylab(NULL) +
scale_x_continuous(expand=c(0,0),limits=c(0.94,1.065)) +
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
# add left chart with injuries
g.injuries <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=injuries, y)) +
geom_bar(stat = "identity") +
geom_text(aes(label=injuries), size=3, vjust=0.5, hjust=2.0) +
ggtitle("Injuries") +
scale_y_reverse(expand=c(0, 0), limits=c(maxInjuries,0)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm"))
# add right chart with fatalities
g.fatalities <- ggplot(data=sumHumanDamage, aes(x=damageSource, y=fatalities)) +
geom_bar(stat = "identity") +
geom_text(aes(label=fatalities), size=3, vjust=0.5, hjust=-1.0) +
ggtitle("Fatalities") +
scale_y_continuous(expand=c(0, 0), limits=c(0,maxFatalities)) +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,0,1,-1), "mm"))
# combine charts in one plot
gg.injuries <- ggplot_gtable(ggplot_build(g.injuries))
gg.fatalities <- ggplot_gtable(ggplot_build(g.fatalities))
gg.mid <- ggplot_gtable(ggplot_build(g.mid))
grid.arrange(gg.injuries,gg.mid,gg.fatalities,
ncol=3,widths=c(4/10,2/10,4/10),
main=paste("Aggregated human injuries & fatalities for weather events from ",cutOffYear," to ",endYear, sep=""))
gg.injuries <- ggplot_gtable(ggplot_build(g.injuries))
gg.fatalities <- ggplot_gtable(ggplot_build(g.fatalities))
gg.mid <- ggplot_gtable(ggplot_build(g.mid))
grid.arrange(gg.injuries,gg.mid,gg.fatalities,
ncol=3,widths=c(4/10,2/10,4/10),
title=paste("Aggregated human injuries & fatalities for weather events from ",cutOffYear," to ",endYear, sep=""))
grid.arrange(gg.injuries,gg.mid,gg.fatalities,
ncol=3,widths=c(4/10,2/10,4/10))
library(caret)
library(randomForest)
library(ggplot2)
setwd('C:/Users/YourDream/Documents/GitHub/Coursera-DataScience-Series/Practical-Machine-Learning')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', 'training.csv') #, method='curl')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', 'testing.csv') #, method='curl')
raw_testing <- read.csv('testing.csv', na.strings=c("#DIV/0!"))
data <- read.csv('training.csv', na.strings=c("#DIV/0!") )
cTest <- raw_testing
for(i in c(8:ncol(cTest)-1)) {cTest[,i] = as.numeric(as.character(cTest[,i]))}
cData <- data
for(i in c(8:ncol(cData)-1)) {cData[,i] = as.numeric(as.character(cData[,i]))}
featuresnames <- colnames(cData[colSums(is.na(cData)) == 0])[-(1:7)]
features <- cData[featuresnames]
submit_Testing <- cTest[featuresnames[1:52]]
set.seed(5188)
xdata <- createDataPartition(y=features$classe, p=3/4, list=FALSE )
training <- features[xdata,]
testing <- features[-xdata,]
num_features_idx = which(lapply(training,class) %in% c('numeric'))
#model <- foreach(ntree=rep(150, 4), .combine=randomForest::combine) %dopar% randomForest(training[-ncol(training)], training$classe, ntree=ntree)
rf_model  <- randomForest(classe ~ ., training, ntree=500, mtry=32)
training_pred <- predict(rf_model, training)
print(confusionMatrix(training_pred, training$classe))
testing_pred <- predict(rf_model, testing)
print(confusionMatrix(testing_pred, testing$classe))
answers <- predict(rf_model, submit_Testing)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(as.character(answers))
raw_testing <- read.csv('testing.csv', na.strings=c("#DIV/0!"))
data <- read.csv('training.csv', na.strings=c("#DIV/0!") )
cTest <- raw_testing
for(i in c(8:ncol(cTest)-1)) {cTest[,i] = as.numeric(as.character(cTest[,i]))}
cData <- data
for(i in c(8:ncol(cData)-1)) {cData[,i] = as.numeric(as.character(cData[,i]))}
featuresnames <- colnames(cData[colSums(is.na(cData)) == 0])[-(1:7)]
features <- cData[featuresnames]
submit_Testing <- cTest[featuresnames[1:52]]
set.seed(5188)
xdata <- createDataPartition(y=features$classe, p=3/4, list=FALSE )
library(caret)
library(randomForest)
library(ggplot2)
setwd('C:/Users/YourDream/Documents/GitHub/Coursera-DataScience-Series/Practical-Machine-Learning')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', 'training.csv') #, method='curl')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', 'testing.csv') #, method='curl')
raw_testing <- read.csv('testing.csv', na.strings=c("#DIV/0!"))
data <- read.csv('training.csv', na.strings=c("#DIV/0!") )
cTest <- raw_testing
for(i in c(8:ncol(cTest)-1)) {cTest[,i] = as.numeric(as.character(cTest[,i]))}
cData <- data
for(i in c(8:ncol(cData)-1)) {cData[,i] = as.numeric(as.character(cData[,i]))}
featuresnames <- colnames(cData[colSums(is.na(cData)) == 0])[-(1:7)]
features <- cData[featuresnames]
submit_Testing <- cTest[featuresnames[1:52]]
set.seed(5188)
xdata <- createDataPartition(y=features$classe, p=3/4, list=FALSE )
training <- features[xdata,]
testing <- features[-xdata,]
num_features_idx = which(lapply(training,class) %in% c('numeric'))
#model <- foreach(ntree=rep(150, 4), .combine=randomForest::combine) %dopar% randomForest(training[-ncol(training)], training$classe, ntree=ntree)
rf_model  <- randomForest(classe ~ ., training, ntree=500, mtry=32)
training_pred <- predict(rf_model, training)
print(confusionMatrix(training_pred, training$classe))
testing_pred <- predict(rf_model, testing)
print(confusionMatrix(testing_pred, testing$classe))
answers <- predict(rf_model, submit_Testing)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(as.character(answers))
answers <- predict(rf_model, submit_Testing)
rf_model  <- randomForest(classe ~ ., training, ntree=500, mtry=32)
library(caret)
install.packages('caret')
library(caret)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(ggplot2)
setwd('C:/Users/YourDream/Documents/GitHub/Coursera-DataScience-Series/Practical-Machine-Learning')
setwd('D:\AAA_ProgrammingFiles\AAA_Learning\Coursera_DataScience\8_PracticalML\Exercises\Project')
setwd('D:/AAA_ProgrammingFiles/AAA_Learning/Coursera_DataScience/8_PracticalML/Exercises/Project')
setwd('D:/AAA_ProgrammingFiles/AAA_Learning/Coursera_DataScience/8_PracticalML/Exercises/Project')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', 'training.csv') #, method='curl')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', 'testing.csv') #, method='curl')
raw_testing <- read.csv('testing.csv', na.strings=c("#DIV/0!"))
data <- read.csv('training.csv', na.strings=c("#DIV/0!") )
cTest <- raw_testing
for(i in c(8:ncol(cTest)-1)) {cTest[,i] = as.numeric(as.character(cTest[,i]))}
cData <- data
for(i in c(8:ncol(cData)-1)) {cData[,i] = as.numeric(as.character(cData[,i]))}
featuresnames <- colnames(cData[colSums(is.na(cData)) == 0])[-(1:7)]
features <- cData[featuresnames]
submit_Testing <- cTest[featuresnames[1:52]]
set.seed(5188)
xdata <- createDataPartition(y=features$classe, p=3/4, list=FALSE )
training <- features[xdata,]
testing <- features[-xdata,]
num_features_idx = which(lapply(training,class) %in% c('numeric'))
#model <- foreach(ntree=rep(150, 4), .combine=randomForest::combine) %dopar% randomForest(training[-ncol(training)], training$classe, ntree=ntree)
rf_model  <- random(classe ~ ., training, ntree=500, mtry=32)
rf_model  <- randomForest(classe ~ ., training, ntree=500, mtry=32)
training_pred <- predict(rf_model, training)
print(confusionMatrix(training_pred, training$classe))
library(e1071)
install.packages("e1071")
print(confusionMatrix(training_pred, training$classe))
testing_pred <- predict(rf_model, testing)
print(confusionMatrix(testing_pred, testing$classe))
answers <- predict(rf_model, submit_Testing)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(as.character(answers))
answers
